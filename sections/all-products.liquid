<style>
  all-products .grid {
    display: grid;
    grid-template-columns: repeat(var(--items-per-row), 1fr);
    gap: 32px;
  }
  all-products .show-more-button {
    margin: 20px auto;
    display: block;
    padding: 12px 78px;
    font-size: var(--font-base);
    border: 1px solid rgb(184, 142, 47);
    color: #b88e2fff;
    background-color: transparent;
    cursor: pointer;
  }
</style>

{% assign remaining_products = '' %}
{% for product in collections.all.products offset: section.settings.products_per_row %}
  {% assign remaining_products = remaining_products | append: product.handle %}
  {% unless forloop.last %}
    {% assign remaining_products = remaining_products | append: ',' %}
  {% endunless %}
{% endfor %}

<div class="section-container">
  <h2 class="section-title">Our Products</h2>
  <all-products
    data-remaining-products="{{ remaining_products }}"
    data-products-per-row="{{ section.settings.products_per_row }}"
  >
    <div class="grid" style="--items-per-row: {{ section.settings.products_per_row }};">
      {% for product in collections.all.products limit: section.settings.products_per_row %}
        {% render 'single-product', product: product %}
      {% endfor %}
    </div>
    <button class="show-more-button">{{ section.settings.show_more_text }}</button>
  </all-products>
</div>

<script>
  class AllProducts extends HTMLElement {
    index = 0;
    constructor() {
      super();
      this.showMoreButton = this.querySelector('.show-more-button');
      this.productsPerRow = this.dataset.productsPerRow;
      this.remainingProducts = this.dataset.remainingProducts.split(',');
      this.grid = this.querySelector('.grid');
      this.showMoreButton.addEventListener('click', this.showMoreProducts.bind(this));
    }

    async showMoreProducts() {
      this.showMoreButton.setAttribute('disabled', 'true');
      const productsToShow = this.remainingProducts.slice(this.index, this.index + this.productsPerRow);
      const products = await Promise.all(
        productsToShow.map(async (productHandle) => {
          const response = await fetch(`/products/${productHandle}?sections=card-product`);
          const data = await response.json();
          return data['card-product'];
        })
      );

      products.forEach((product) => {
        this.grid.innerHTML += product;
      });

      this.index += this.productsPerRow;
      if (this.index >= this.remainingProducts.length) {
        this.showMoreButton.style.display = 'none';
      } else {
        this.showMoreButton.removeAttribute('disabled');
      }
    }
  }

  customElements.define('all-products', AllProducts);
</script>

{% schema %}
{
  "name": "All Products",
  "settings": [
    {
      "type": "number",
      "id": "products_per_row",
      "label": "Products per row",
      "default": 4
    },
    {
      "type": "number",
      "id": "products_per_column",
      "label": "Products per column",
      "default": 4
    },
    {
      "type": "text",
      "id": "show_more_text",
      "label": "Show More Button Text",
      "default": "Show More"
    }
  ],
  "presets": [
    {
      "name": "All Products"
    }
  ]
}
{% endschema %}
